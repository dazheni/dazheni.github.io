<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java基础(Basic)</title>
    <url>/2019/12/04/undefined.html</url>
    <content><![CDATA[<p>引言<br>博主是计算机学记者,建立博客只是为了系统化得整理一下知识,如果有写的不好的地方还挺各位大佬多多理解!</p>
<h1 id="Java基础-Basic"><a href="#Java基础-Basic" class="headerlink" title="Java基础(Basic)"></a>Java基础(Basic)</h1><h2 id="java标识符"><a href="#java标识符" class="headerlink" title="java标识符"></a>java标识符</h2><p>java中的标识符组成:数组 字母,下划线,$美元符<br>java中大小写敏感,没有长度限制,不可以使用数字开头</p>
<h3 id="java基本语法"><a href="#java基本语法" class="headerlink" title="java基本语法:"></a>java基本语法:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello_Demo</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		  System.out.println(<span class="string">"Hello,World!"</span>);<span class="comment">//输出语句</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">int</span> a = <span class="keyword">new</span> Scanner(System.in).nextInt();<span class="comment">//输入语句</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h2 id="java基本数据类型"><a href="#java基本数据类型" class="headerlink" title="java基本数据类型"></a>java基本数据类型</h2><p>数据类型分类：<strong>基本数据类型</strong>(8种) 和 <strong>引用数据类型</strong>  </p>
<table border="1">
<caption>基本数据类型</caption>
    <tr>
        <th>基本数据类型</th><th>字节(byte)</th>
        <th>使用范围</th><th>数据范围</th>
    </tr>
     <tr>
        <td>byte类型</td><td>1字节[8位]</td>
        <td>IO常用</td><td>-128~127</td>
     </tr>
      <tr>
        <td>short短整型</td><td>2字节[16位]</td>
        <td>有符号以二进制补码表示</td><td>-32768~32767</td>
     </tr>
      <tr>
        <td>int整型</td><td>4字节[32位]</td>
        <td>十六进制0x开头</td><td>-2147483648~2147483647</td>
     </tr>
      <tr>
        <td>long整型</td><td>8字节[64位]</td>
        <td>数值超过int类型加L</td><td>-9223372036854775808~9223..807L</td>
     </tr>
      <tr>
        <td>float单精度浮点</td><td>4字节[32位]</td>
        <td>不常用,不精准</td><td>3.4E-38～3.4E+38F</td>
     </tr>
      <tr>
        <td>double双精度浮点</td><td>8字节[64位]</td>
        <td>常用,精准</td><td>1.7E-308～1.7E+308</td>
     </tr>
      <tr>
        <td>char字符型</td><td>2字节[16位]</td>
        <td>表示一个字符''</td><td>无符号16位类型，0到65535</td>
     </tr>
     <tr>
        <td>boolean布尔型</td><td>1字节[8位]</td>
        <td>true - false</td><td>真?假</td>
     </tr>
</table>  

<h2 id="java基本语法-1"><a href="#java基本语法-1" class="headerlink" title="java基本语法"></a>java基本语法</h2><ol>
<li>while循环 </li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//输出1~100的累加和</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sum+=i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"1-100的累加和:"</span>+sum);</span></pre></td></tr></table></figure>
<ol start="2">
<li><p>do…while循环</p>
<ul>
<li>对于while语句而言，如果不满足条件，则不能进入循环。但有时候我们需要</li>
<li>即使不满足条件，也至少 执行一次。 </li>
<li>do…while循环和while循环相同，不同的是， </li>
<li>do…while循环至少会执行一次。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		System.out.print(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		x++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		System.out.print(<span class="string">"\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">while</span> (x &lt; <span class="number">20</span>);</span></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>for循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//for (  1初始化;  2布尔表达式; 4更新)&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//代码语句</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//关于for循环有以下几点说明：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//然后，检测布尔表达式的值。如果是true，循环体被执行，如果是false，循环体终止，开始执行循环后面的语句。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//执行一次循环后，更新循环控制变量。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//再次检测布尔表达式。循环执行上面的过程。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">10</span>;x&lt;<span class="number">20</span>;x++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		System.out.print(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		System.out.print(<span class="string">"\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>java5引入一种主要用于数组的增强型rot循环.</p>
<ul>
<li>新for循环<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// for(声明语句：表达式)&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//代码句子</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> 其作用域限定在循环语句块其值与此时数组元素的值相等。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">表达式：表达式是要访问的数组名，或者是返回值为数组的方法。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">int</span>[] numbers = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span> &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> x : numbers) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	  System.out.print(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	  System.out.print(<span class="string">","</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	  System.out.print(<span class="string">"\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	String[] names = &#123; <span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span> &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (String name : names) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	  System.out.print(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	  System.out.print(<span class="string">","</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>break和continue</p>
<ul>
<li>break主要用在循环语句或者switch语句中，用来跳出整个语句块.</li>
<li>continue跳出最里面的循环，并且继续执行该循环下面的语句.</li>
</ul>
</li>
</ol>
<a id="more"></a>

<h3 id="先到这吧-时间不够了-本博客页面还未完结-过后还会在进行添加"><a href="#先到这吧-时间不够了-本博客页面还未完结-过后还会在进行添加" class="headerlink" title="先到这吧,时间不够了,本博客页面还未完结,过后还会在进行添加!"></a>先到这吧,时间不够了,本博客页面还未完结,过后还会在进行添加!</h3>]]></content>
      <categories>
        <category>Java开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
